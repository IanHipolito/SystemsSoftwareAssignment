#!/bin/sh
### BEGIN INIT INFO
# Provides:          company_daemon
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Company report management daemon
# Description:       Daemon to manage department reports, backup, and transfer operations
### END INIT INFO

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DAEMON=/usr/sbin/company_daemon
NAME=company_daemon
DESC="Company Report Management Daemon"
PIDFILE=/var/run/company_daemon.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
        || return 1
    start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON \
        || return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2
    # Wait for children to finish too
    start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
    [ "$?" = 2 ] && return 2
    # Many daemons don't delete their pidfiles when they exit.
    rm -f $PIDFILE
    return "$RETVAL"
}

#
# Function that sends a SIGUSR1 to the daemon/service to force a backup
#
do_force_backup()
{
    kill -USR1 $(cat $PIDFILE)
    return 0
}

#
# Function that sends a SIGUSR2 to the daemon/service to force a transfer
#
do_force_transfer()
{
    kill -USR2 $(cat $PIDFILE)
    return 0
}

#
# Function that sends a SIGUSR1 to the daemon/service to force an urgent change
#
do_urgent_change()
{
    # Create a named pipe for the response
    TMPFIFO="/tmp/urgent_change_$$.fifo"
    mkfifo $TMPFIFO || return 1
    
    # Prepare the message
    # Usage: init.d/company_daemon urgent_change filename username "content"
    if [ $# -lt 3 ]; then
        echo "Usage: $0 urgent_change filename username \"content\""
        rm -f $TMPFIFO
        return 1
    fi
    
    FILENAME="$2"
    USERNAME="$3"
    CONTENT="$4"
    
    # Format the message for the IPC
    MESSAGE="$FILENAME|$USERNAME|$CONTENT"
    
    # Write to the FIFO
    echo -e "6\n$(cat $PIDFILE)\n0\n$MESSAGE" > /var/run/company_daemon_pipe
    
    # Clean up
    rm -f $TMPFIFO
    
    return 0
}

case "$1" in
  start)
    log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
        0|1) log_end_msg 0 ;;
        2) log_end_msg 1 ;;
    esac
    ;;
  stop)
    log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
        0|1) log_end_msg 0 ;;
        2) log_end_msg 1 ;;
    esac
    ;;
  status)
    status_of_proc -p $PIDFILE "$DAEMON" "$NAME" && exit 0 || exit $?
    ;;
  restart|force-reload)
    log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1)
        do_start
        case "$?" in
          0) log_end_msg 0 ;;
          1) log_end_msg 1 ;; # Old process is still running
          *) log_end_msg 1 ;; # Failed to start
        esac
        ;;
      *)
        # Failed to stop
        log_end_msg 1
        ;;
    esac
    ;;
  backup)
    log_daemon_msg "Forcing backup for $DESC" "$NAME"
    do_force_backup
    log_end_msg 0
    ;;
  transfer)
    log_daemon_msg "Forcing transfer for $DESC" "$NAME"
    do_force_transfer
    log_end_msg 0
    ;;
  urgent_change)
    log_daemon_msg "Sending urgent change request to $DESC" "$NAME"
    shift
    do_urgent_change "$@"
    log_end_msg 0
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload|backup|transfer|urgent_change filename username \"content\"}" >&2
    exit 3
    ;;
esac

exit 0